#' Author Adam Sorbie
#' Date: 2019-08-01
library(tidyverse)
library(phyloseq)
append_unknown <- function(otu) {
for (i in 1:dim(otu)[1]) {
# Split taxonomic information in its taxonomic classes
# Kingdom - Phylum - Class - Family - Order - Genus
splitTax <- strsplit(x = as.character(taxonomy[i]), ";")
# Save the position where the first empty string (sequence of characters) occurs
value <- which(splitTax[[1]] == "")[1]
# Save the last known taxa information
lastTaxa = splitTax[[1]][value - 1]
# Replace all empty values by the last taxa information and the prefix "unkown_"
splitTax <-replace(splitTax[[1]],splitTax[[1]] == "",paste("unknown_",lastTaxa))
# Write new taxonomic information in the dataframe
taxonomy_new[i] <- list(splitTax)
}
}
split_taxonomy <- function(otu) {
# select taxa column and split taxonomy column into separate columns using ; delimiter
otu_taxa <- append_unknown(otu)
taxonomy_phylo <- select(otu_taxa, "taxonomy") %>%
separate("taxonomy", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";")
return(taxonomy_phylo)
}
read_tab_delim <- function(df) {
# read all tab delimited files using these params
df_out <- read.table(df, row.names = 1, header = 1, sep="\t", comment.char = "", check.names = F )
return(df_out)
}
load_phylo <- function(otu, taxa, mapping) {
# convert to phyloseq and return list
phylo_otu <- otu_table(otu, taxa_are_rows = T)
phylo_tax <- tax_table(as.matrix(taxa))
phylo_map <- sample_data(mapping) # should re-write this to return phyloseq obj using merge_phyloseq
return(merge_phyloseq(phylo_otu, phylo_tax, phylo_map))
}
prep_4_phyloseq <- function(otu, mapping){
# read files
otu_taxa <- read_tab_delim(otu)
metadata <- read_tab_delim(mapping)
# convert otu into matrix and drop taxonomy col
count_matrix <- as.matrix(subset(otu_taxa, select=-taxonomy))
# split taxonomy
taxonomy_phylo <- split_taxonomy(otu_taxa)
# make sure taxa table row names match otu
rownames(taxonomy_phylo) <- rownames(otu_taxa)
# use load phylo function to convert all files to phyloseq objs
out <- load_phylo(count_matrix, taxonomy_phylo, metadata)
return(out)
}
phylo_obj <- prep_4_phyloseq("OTUs-Table.tab", "mapping_file.tab")
append_unknown <- function(otu) {
taxonomy <- otu[,dim(otu)[2]]
for (i in 1:dim(otu)[1]) {
# Split taxonomic information in its taxonomic classes
# Kingdom - Phylum - Class - Family - Order - Genus
splitTax <- strsplit(x = as.character(taxonomy[i]), ";")
# Save the position where the first empty string (sequence of characters) occurs
value <- which(splitTax[[1]] == "")[1]
# Save the last known taxa information
lastTaxa = splitTax[[1]][value - 1]
# Replace all empty values by the last taxa information and the prefix "unkown_"
splitTax <-replace(splitTax[[1]],splitTax[[1]] == "",paste("unknown_",lastTaxa))
# Write new taxonomic information in the dataframe
taxonomy_new[i] <- list(splitTax)
}
}
split_taxonomy <- function(otu) {
# select taxa column and split taxonomy column into separate columns using ; delimiter
otu_taxa <- append_unknown(otu)
taxonomy_phylo <- select(otu_taxa, "taxonomy") %>%
separate("taxonomy", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";")
return(taxonomy_phylo)
}
read_tab_delim <- function(df) {
# read all tab delimited files using these params
df_out <- read.table(df, row.names = 1, header = 1, sep="\t", comment.char = "", check.names = F )
return(df_out)
}
load_phylo <- function(otu, taxa, mapping) {
# convert to phyloseq and return list
phylo_otu <- otu_table(otu, taxa_are_rows = T)
phylo_tax <- tax_table(as.matrix(taxa))
phylo_map <- sample_data(mapping) # should re-write this to return phyloseq obj using merge_phyloseq
return(merge_phyloseq(phylo_otu, phylo_tax, phylo_map))
}
prep_4_phyloseq <- function(otu, mapping){
# read files
otu_taxa <- read_tab_delim(otu)
metadata <- read_tab_delim(mapping)
# convert otu into matrix and drop taxonomy col
count_matrix <- as.matrix(subset(otu_taxa, select=-taxonomy))
# split taxonomy
taxonomy_phylo <- split_taxonomy(otu_taxa)
# make sure taxa table row names match otu
rownames(taxonomy_phylo) <- rownames(otu_taxa)
# use load phylo function to convert all files to phyloseq objs
out <- load_phylo(count_matrix, taxonomy_phylo, metadata)
return(out)
}
phylo_obj <- prep_4_phyloseq("OTUs-Table.tab", "mapping_file.tab")
append_unknown <- function(otu) {
taxonomy <- otu[,dim(otu)[2]]
taxonomy_new <- NULL
for (i in 1:dim(otu)[1]) {
# Split taxonomic information in its taxonomic classes
# Kingdom - Phylum - Class - Family - Order - Genus
splitTax <- strsplit(x = as.character(taxonomy[i]), ";")
# Save the position where the first empty string (sequence of characters) occurs
value <- which(splitTax[[1]] == "")[1]
# Save the last known taxa information
lastTaxa = splitTax[[1]][value - 1]
# Replace all empty values by the last taxa information and the prefix "unkown_"
splitTax <-replace(splitTax[[1]],splitTax[[1]] == "",paste("unknown_",lastTaxa))
# Write new taxonomic information in the dataframe
taxonomy_new[i] <- list(splitTax)
}
}
split_taxonomy <- function(otu) {
# select taxa column and split taxonomy column into separate columns using ; delimiter
otu_taxa <- append_unknown(otu)
taxonomy_phylo <- select(otu_taxa, "taxonomy") %>%
separate("taxonomy", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";")
return(taxonomy_phylo)
}
read_tab_delim <- function(df) {
# read all tab delimited files using these params
df_out <- read.table(df, row.names = 1, header = 1, sep="\t", comment.char = "", check.names = F )
return(df_out)
}
load_phylo <- function(otu, taxa, mapping) {
# convert to phyloseq and return list
phylo_otu <- otu_table(otu, taxa_are_rows = T)
phylo_tax <- tax_table(as.matrix(taxa))
phylo_map <- sample_data(mapping) # should re-write this to return phyloseq obj using merge_phyloseq
return(merge_phyloseq(phylo_otu, phylo_tax, phylo_map))
}
prep_4_phyloseq <- function(otu, mapping){
# read files
otu_taxa <- read_tab_delim(otu)
metadata <- read_tab_delim(mapping)
# convert otu into matrix and drop taxonomy col
count_matrix <- as.matrix(subset(otu_taxa, select=-taxonomy))
# split taxonomy
taxonomy_phylo <- split_taxonomy(otu_taxa)
# make sure taxa table row names match otu
rownames(taxonomy_phylo) <- rownames(otu_taxa)
# use load phylo function to convert all files to phyloseq objs
out <- load_phylo(count_matrix, taxonomy_phylo, metadata)
return(out)
}
phylo_obj <- prep_4_phyloseq("OTUs-Table.tab", "mapping_file.tab")
append_unknown <- function(otu) {
taxonomy <- otu[,dim(otu)[2]]
taxonomy_new <- data.frame()
for (i in 1:dim(otu)[1]) {
# Split taxonomic information in its taxonomic classes
# Kingdom - Phylum - Class - Family - Order - Genus
splitTax <- strsplit(x = as.character(taxonomy[i]), ";")
# Save the position where the first empty string (sequence of characters) occurs
value <- which(splitTax[[1]] == "")[1]
# Save the last known taxa information
lastTaxa = splitTax[[1]][value - 1]
# Replace all empty values by the last taxa information and the prefix "unkown_"
splitTax <-replace(splitTax[[1]],splitTax[[1]] == "",paste("unknown_",lastTaxa))
# Write new taxonomic information in the dataframe
taxonomy_new[i] <- list(splitTax)
}
}
split_taxonomy <- function(otu) {
# select taxa column and split taxonomy column into separate columns using ; delimiter
otu_taxa <- append_unknown(otu)
taxonomy_phylo <- select(otu_taxa, "taxonomy") %>%
separate("taxonomy", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";")
return(taxonomy_phylo)
}
read_tab_delim <- function(df) {
# read all tab delimited files using these params
df_out <- read.table(df, row.names = 1, header = 1, sep="\t", comment.char = "", check.names = F )
return(df_out)
}
load_phylo <- function(otu, taxa, mapping) {
# convert to phyloseq and return list
phylo_otu <- otu_table(otu, taxa_are_rows = T)
phylo_tax <- tax_table(as.matrix(taxa))
phylo_map <- sample_data(mapping) # should re-write this to return phyloseq obj using merge_phyloseq
return(merge_phyloseq(phylo_otu, phylo_tax, phylo_map))
}
prep_4_phyloseq <- function(otu, mapping){
# read files
otu_taxa <- read_tab_delim(otu)
metadata <- read_tab_delim(mapping)
# convert otu into matrix and drop taxonomy col
count_matrix <- as.matrix(subset(otu_taxa, select=-taxonomy))
# split taxonomy
taxonomy_phylo <- split_taxonomy(otu_taxa)
# make sure taxa table row names match otu
rownames(taxonomy_phylo) <- rownames(otu_taxa)
# use load phylo function to convert all files to phyloseq objs
out <- load_phylo(count_matrix, taxonomy_phylo, metadata)
return(out)
}
append_unknown <- function(otu) {
taxonomy <- otu[,dim(otu)[2]]
taxonomy_new <- data.frame()
for (i in 1:dim(otu)[1]) {
# Split taxonomic information in its taxonomic classes
# Kingdom - Phylum - Class - Family - Order - Genus
splitTax <- strsplit(x = as.character(taxonomy[i]), ";")
# Save the position where the first empty string (sequence of characters) occurs
value <- which(splitTax[[1]] == "")[1]
# Save the last known taxa information
lastTaxa = splitTax[[1]][value - 1]
# Replace all empty values by the last taxa information and the prefix "unkown_"
splitTax <-replace(splitTax[[1]],splitTax[[1]] == "",paste("unknown_",lastTaxa))
# Write new taxonomic information in the dataframe
taxonomy_new[i] <- list(splitTax)
}
}
split_taxonomy <- function(otu) {
# select taxa column and split taxonomy column into separate columns using ; delimiter
otu_taxa <- append_unknown(otu)
taxonomy_phylo <- select(otu_taxa, "taxonomy") %>%
separate("taxonomy", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";")
return(taxonomy_phylo)
}
read_tab_delim <- function(df) {
# read all tab delimited files using these params
df_out <- read.table(df, row.names = 1, header = 1, sep="\t", comment.char = "", check.names = F )
return(df_out)
}
load_phylo <- function(otu, taxa, mapping) {
# convert to phyloseq and return list
phylo_otu <- otu_table(otu, taxa_are_rows = T)
phylo_tax <- tax_table(as.matrix(taxa))
phylo_map <- sample_data(mapping) # should re-write this to return phyloseq obj using merge_phyloseq
return(merge_phyloseq(phylo_otu, phylo_tax, phylo_map))
}
prep_4_phyloseq <- function(otu, mapping){
# read files
otu_taxa <- read_tab_delim(otu)
metadata <- read_tab_delim(mapping)
# convert otu into matrix and drop taxonomy col
count_matrix <- as.matrix(subset(otu_taxa, select=-taxonomy))
# split taxonomy
taxonomy_phylo <- split_taxonomy(otu_taxa)
# make sure taxa table row names match otu
rownames(taxonomy_phylo) <- rownames(otu_taxa)
# use load phylo function to convert all files to phyloseq objs
out <- load_phylo(count_matrix, taxonomy_phylo, metadata)
return(out)
}
phylo_obj <- prep_4_phyloseq("OTUs-Table.tab", "mapping_file.tab")
otu <- read_tab_delim("OTUs-Table.tab")
split_taxonomy(otu)
View(otu)
split_taxonomy <- function(otu) {
# select taxa column and split taxonomy column into separate columns using ; delimiter
taxonomy_phylo <- select(otu, "taxonomy") %>%
separate("taxonomy", c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus"), sep = ";")
return(taxonomy_phylo)
}
split_taxonomy(otu)
x <- split_taxonomy(otu)
View(x)
append_unknown <- function(taxa_split) {
taxa_df <- data.frame()
for (i in 1: dim(taxa_split) [1]) {
value <- which(taxa_split[[1]] == "") [1]
last_taxa <- taxa_split[[1]][value -1]
taxa_out <- replace(taxa_split[[1]],taxa_split[[1]] == "",paste("unknown_",last_taxa))
taxa_df[i] <- list(taxa_out)
}
}
append_unknown(x)
View(x)
y <- append_unknown(x)
warning()
warnings()
y <- append_unknown(x)
warnings()
install.packages("zoo")
library(zoo)
append_unknown <- function(taxa_split) {
taxa_out <- data.frame(t(apply(taxa_split, 1, na.locf)))
}
y <- append_unknown(x)
View(x)
append_unknown <- function(taxa_split) {
taxa_out <- data.frame(t(apply(taxa_split, 1, na.locf)))
return(taxa_out)
}
y <- append_unknown(x)
View(x)
append_unknown <- function(taxa_split) {
taxa_nas <- taxa_split %>% mutate_all(na_if,"")
taxa_out <- data.frame(t(apply(taxa_nas, 1, na.locf)))
return(taxa_out)
}
y <- append_unknown(x)
View(y)
